crime.ZS = bas.lm(y ~ ., data=UScrome, prior = "ZS-null", modelprior = uniform(), method = "MCMC")
crime.ZS = bas.lm(y ~ ., data=UScrime, prior = "ZS-null", modelprior = uniform(), method = "MCMC")
crime.ZS = bas.lm(y ~ ., data=UScrime, prior = "ZS-null", modelprior = uniform(), method = "MCMC")
library(MASS)
data("UScrime")
UScrime[,2]=log(UScrime[,2])
data("UScrime")
UScrime[,-2]=log(UScrime[,-2])
crime.ZS = bas.lm(y ~ ., data=UScrime, prior = "ZS-null", modelprior = uniform(), method = "MCMC")
diagnostics(crime.ZS)
(1-(2*pnorm(-3)))^100
1-(1-(2*pnorm(-3)))^100
1-(1-(2*pnorm(-3)))^1000
1-(1-(2*pnorm(-4)))^1000
library(statsr)
library(MASS)
library(dplyr)
library(ggplot2)
library(BAS)
data(wage)
summary(wage$wage)
plot(wage$wage)
ggplot(wage$wage) + geom_density()
ggplot(wage$wage) + geom_boxplot()
ggplot(wage, aes(x=wage)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
nrow(wage$wage < 300)
test <- wage$wage < 300
test
test <-wage[wage$wage < 300, ]
test
test
nrow(test)
test <-wage$wage[wage$wage < 300, ]
test <-wage[wage$wage < 300, ]$wage
test
?corr
library(Hmisc)
m_wage_iq = lm(wage ~ iq, data = wage)
m_wage_iq$coefficients
summary(m_wage_iq)$sigma
residuals(m_wage_iq
)
wage_resid <- resid(m_wage_iq)
plot(wage$iq, wage_resid)
abline(0,0)
wage_resid <- resid(m_wage_iq)
wage_resid <- resid(m_wage_iq)
wage.stres <- rstandard(m_wage_iq)
plot(wage$iq, wage_resid)
abline(0,0)
qqnorm(wage.stres,
+     ylab="Standardized Residuals",
+     xlab="Normal Scores")
qqline(wage.stres)
wage_resid <- resid(m_wage_iq)
wage.stres <- rstandard(m_wage_iq)
plot(wage$iq, wage_resid)
abline(0,0)
qqnorm(wage.stres)
qqline(wage.stres)
out <- m_wage_iq$coefficients
out <- cbind(out, confint(m_wage_iq))
colnames(out) <- c("posterior mean", "sd", "2.5", "97.5")
out
out <- m_lwage_iq$coefficients
m_lwage_iq = lm(lwage ~ iq, data = wage)
out <- m_lwage_iq$coefficients
out <- cbind(out, confint(m_lwage_iq))
out
m_lwage_full = lm(lwage ~ . - wage, data = wage)
summary(m_lwage_full)
m_lwage_nobrthord = lm(lwage ~ . -wage -brthord, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord = lm(lwage ~ . -wage -sibs, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord = lm(lwage ~ . -wage -feduc, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord = lm(lwage ~ . -wage -meduc, data = na.omit(wage))
BIC(m_lwage_nobrthord)
wage_no_na = na.omit(wage)
bma_lwage = bas.lm(lwage ~ . -wage, data = wage_no_na,
prior = "BIC",
modelprior = uniform())
bma_lwage
summary(bma_lwage)
par(mfrow = c(1,2))
coef_lwage = coefficients(bma_lwage)
plot(coef_lwage, subset = c(3,13), ask=FALSE)
wage_red = wage %>%
select(-sibs, -brthord, -meduc, -feduc)
nrow(wage_red)
name(wage_red)
names(wage_red)
bma_lwage2 = bas.lm(lwage ~ . -wage, data = wage_red,
prior = "BIC",
modelprior = uniform())
bma_lwage2
summary(bma_lwage2)
?bas.lm
bma_lwage2 = bas.lm(lwage ~ . -wage, data = wage_red,
prior = "ZS-null",
modelprior = beta.binomial(1,1))
bma_lwage2
summary(bma_lwage2)
set.seed(314)
N = 100000
phi = rgamma(N,2,2)
sigma2 = 1/phi
mu = rnorm(N, 1, sqrt(sigma2/4))
y_5 = rnorm(N, mu, sqrt(sigma2))
summary(y_5)
summary(y_5)$coefficients
confint(y_5)
confint(y_5)
y_5
nrow(y_5)
mu
test2 <- y_5~mu
test2
test2 <- lm(y_5~mu)
summary(test2)
out <- test2$coefficients
out <- cbind(out, confint(test2))
out
test2 <- lm(mu~y_5)
out <- test2$coefficients
out <- cbind(out, confint(test2))
out
y_5
confint(y_5, parm="pred")
BPM_pred_lwage =  predict(bma_lwage, estimator="BPM", se.fit=TRUE)
bma_lwage$namesx[BPM_pred_lwage$bestmodel+1]
MPM_pred_lwage =  predict(bma_lwage, estimator="MPM")
BPM_pred_lwage
opt = which.max(BPM_pred_lwage$fit)
t(wage_no_na[opt, ])
ncredint(y_5,verbose=TRUE)
summary(y_5)
?confint
out <- test2$coefficients
out <- cbind(out, confint(test2))
out
fit <- lm(y_5)
head(y_5)
order(y_5)
test3 <- y_5[order(y_5), ]
test3 <- y_5[order(y_5) ]
head(test3)
test4 <- seq(1:1000)
fit <- lm(y_5 ~ test3)
fit <- lm(y_5 ~ test4)
nrow(y_5)
fit <- lm(test3 ~ test4)
nrow(test3)
length(test3)
length(test4)
test4 <- seq(1:10000)
fit <- lm(test3 ~ test4)
length(test4)
test4 <- seq(1:100000)
fit <- lm(test3 ~ test4)
out <- fit$coefficients
out <- cbind(out, confint(fit))
out
?rnorm
qnorm(0.025, mu, sqrt(sigma2))
library(statsr)
library(BAS)
data(wage)
library(statsr)
library(BAS)
data(wage)
?predict
install.packages("rstan")
install.packages('foreach')
install.packages('doParallel')
result <- foreach(i= 1:3) %do% sqrt(i)
library(foreach)
library(doParallel)
result <- foreach(i= 1:3) %do% sqrt(i)
result
class(result)
reverse <- foreach(i=result) %do% i^2
reverse
result <- foreach(a=1:3, b=rep(10,5)) %do% (a+b)
result
length(result)
set.seed(1234)
require(iterators)
result <- foreach(v =  irnorm(5, count = 3)) %do% max(v)
result
result <- foreach(v =  irnorm(5, count = 3), .combine='c') %do% max(v)
xlass(result)
class(result)
result
result <- foreach(v =  irnorm(5, count = 3), .combine='cbind') %do% max(v)
result
class(result)
result_c <- foreach(v = irnorm(5, count = 3), .combine = 'c') %do% v
result <- foreach(v =  irnorm(5, count = 3), .combine='cbind') %do% v
result
?foreach
result ‹- foreach(i = 1:10) %:% when(i › 0) %do% sqrt(i)
require(foreach)
result <- foreach(i = 1:10, .combine = 'c') %:% when(i%%2 == 0) %do% log(i)
print(result)
library(gtrendsR)
install.packages("gtrendsR")
library(reshape2)
library(gtrendsR)
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
library(gtrendsR)
library(reshape2)
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
rownames(google.trends) = google.trends$date
google.trends$date = NULL
?gconnect
gconnect(truongmdang@gmail.com, treadstone3)
gconnect(user = "truongmdang@gmail.com", treadstone3)
gconnect(usr = "truongmdang@gmail.com", psw = "treadstone3")
gconnect(usr = "truongmdang@gmail.com", psw = "treadstone")
gconnect(usr = "truongmdang@gmail.com", psw = "treadstone3", verbose = TRUE)
library(gtrendsR)
library(reshape2)
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
rownames(google.trends) = google.trends$date
google.trends$date = NULL
?gtrends
head(gtrendsR)
?grentsR
?gtrendsR
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
res <- gtrends(c("nhl"), geo = c("CA"))
plot(res)
res <- gtrends(c("Anne Kuster", "Jim Lawrence", "John Babiarz"), time = "2016-01-01 2016-12-31")
head(res$interest_over_time)
devtools::install_github('PMassicotte/gtrendsR')
library(gtrendsR)
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
install.packages("drat")       # easier repo access + creation
drat:::add("ghrr")             # make it known
install.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
gconnect(usr="truongmdang@gmail.com", psw="treadstone3")
library(gtrendsR)
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
# devtools::install_github('PMassicotte/gtrendsR', ref = 'new-api')
devtools::install_github('PMassicotte/gtrendsR', ref = 'new-api')
install.packages("gtrendsR")
install.packages("gtrendsR")
install.packages("readr")
library(gtrendsR)
ls("package:gtrendsR")
library(readr)
gconnect(usr="truongmdang@gmail.com", psw="treadstone3")
sport_trend <- gtrends(c("pga", "nhl", "nba", "nfl"))
### Plot the data
#data("sport_trend")
plot(sport_trend)
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
?grents
?gtrends
google.trends = gtrends(c("blu-ray"), gprop = "", time = "all")[[1]]
google.trends = gtrends(c("blu-ray"), time = "all")[[1]]
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
library(reshape2)
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
google.trends = gtrends(c("blu-ray"), time = "all")[[1]]
remove.packages(gtrendsR)
remove.packages("gtrendsR")
library(reshape2)
library(gtrendsR)
remove.packages("gtrendsR")
remove.packages("gtrendsR")
library(gtrendsR)
install.packages("gtrendsR")
gconnect(usr="truongmdang@gmail.com", psw="treadstone3")
library(gtrendsR)
gconnect(usr="truongmdang@gmail.com", psw="treadstone3")
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
res <- gtrends(c("nhl", "nba"), geo = "US")
plot(res)
sport_trend <- gtrends(c("nhl", "nba", "nfl"))
library(gtrendsR)
sport_trend <- gtrends(c("nhl", "nba", "nfl"))
gconnect(usr="truongmdang@gmail.com", psw="treadstone3")
gconnect(usr="truongmdang@gmail.com", psw="treadstone3", verbose=TRUE)
sport_trend <- gtrends(c("nhl", "nba", "nfl"))
sport_trend <- gtrends(query = c("nhl", "nba", "nfl"))
remove.packages("gtrendsR")
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
# do not need to log in anymore
# syntax change!
gt.us <- gtrends("USA", geo="US", time = "2004-01-01 2004-01-30")
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
library(reshape2)
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
rownames(google.trends) = google.trends$date
google.trends$date = NULL
library(rvest)
library(tidyverse)
library(stringr)
library(ggmap)
install.packages("tidyverse")
install.packages("ggmap")
library(rvest)
library(tidyverse)
library(stringr)
library(ggmap)
html.amz_cities <- read_html("https://www.cbsnews.com/news/amazons-hq2-cities-second-headquarters-these-cities-are-contenders/")
df.amz_cities <- html.amz_cities %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
# inspect
df.amz_cities %>% head()
?html_node
?html_nodes
?html_table
# inspect
df.amz_cities %>% head()# inspect initial column names
colnames(df.amz_cities)
# assign new column names
colnames(df.amz_cities) <- c("metro_area", 'state', 'population_tot', 'bachelors_degree_pct')
# inspect
df.amz_cities %>% head()
df.amz_cities <- df.amz_cities %>% filter(row_number() != 1)
f.amz_cities <- mutate(df.amz_cities, population_tot = parse_number(population_tot))
# check
typeof(df.amz_cities$population_tot)
# inspect
df.amz_cities %>% head()
f.amz_cities <- mutate(df.amz_cities, bachelors_degree_pct = as.numeric(bachelors_degree_pct))
df.amz_cities <- mutate(df.amz_cities, bachelors_degree_pct = as.numeric(bachelors_degree_pct))
?mutate
df.amz_cities <- df.amz_cities %>% mutate(city = str_extract(metro_area, "^[^-]*"))
df.amz_cities %>% head()
?geocode
data.geo <- geocode(df.amz_cities$city)
data.geo %>% head()
data.geo
df.amz_cities <- cbind(df.amz_cities, data.geo)
df.amz_cities
df.amz_cities <- rename(df.amz_cities, long = lon)
df.amz_cities %>% names()
df.amz_cities <- select(df.amz_cities, city, state, metro_area, long, lat, population_tot, bachelors_degree_pct)
df.amz_cities %>% head()
map.states <- map_data("state")
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct))
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), alpha = .5) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), shape = 1) +
coord_map(projection = "albers", lat0 = 30, lat1 = 40, xlim = c(-121,-73), ylim = c(25,51)) +
scale_color_gradient2(low = "red", mid = "yellow", high = "green", midpoint = .41, labels = scales::percent_format()) +
scale_size_continuous(range = c(.9, 11),  breaks = c(2000000, 10000000, 20000000),labels = scales::comma_format()) +
guides(color = guide_legend(reverse = T, override.aes = list(alpha = 1, size = 4) )) +
labs(color = "Bachelor's Degree\nPercent"
,size = "Total Population\n(metro area)"
,title = "Possible cities for new Amazon Headquarters"
,subtitle = "Based on population & percent of people with college degrees") +
theme(text = element_text(colour = "#444444", family = "Gill Sans")
,panel.background = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
,axis.text = element_blank()
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 12)
,legend.key = element_rect(fill = "white"))
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), alpha = .5) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), shape = 1) +
coord_map(projection = "albers", lat0 = 30, lat1 = 40, xlim = c(-121,-73), ylim = c(25,51)) +
scale_color_gradient2(low = "red", mid = "yellow", high = "green", midpoint = .41, labels = scales::percent_format()) +
scale_size_continuous(range = c(.9, 11),  breaks = c(2000000, 10000000, 20000000),labels = scales::comma_format()) +
guides(color = guide_legend(reverse = T, override.aes = list(alpha = 1, size = 4) )) +
labs(color = "Bachelor's Degree\nPercent"
,size = "Total Population\n(metro area)"
,title = "Possible cities for new Amazon Headquarters"
,subtitle = "Based on population & percent of people with college degrees") +
theme(text = element_text(colour = "#444444", family = "Gill Sans")
,panel.background = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
,axis.text = element_blank()
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 12)
,legend.key = element_rect(fill = "white")
)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
gasData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep = ",")
responseData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep = ",")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep = ",")
View(responseData)
responseData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep = "\t")
responseData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep = "/t")
?read.table
responseData <- read.table("Data Lecture 5-5.txt", header=TRUE, sep ="\t", "Data Lecture 5-5.txt")
responseData <- read.table("Data Lecture 5-5.csv", header=TRUE, sep ="\t", "Data Lecture 5-5.txt")
responseData <- read.table("Data Lecture 5-5.csv", header=TRUE, sep =",", "Data Lecture 5-5.txt")
View(responseData)
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("Data Lecture 5-5.csv", header=TRUE, sep =",", "Data Lecture 5-5.txt")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("Data Lecture 5-5.csv", header=TRUE, sep =",", "Data Lecture 5-5.txt")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("Data Lecture 5-5.csv", header=TRUE, sep =",", "Data Lecture 5-5.txt")
TrainExer5-5.txt
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("TrainExer5-5.txt", header=TRUE, sep =",", "Data Lecture 5-5.txt")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.table("TrainExer5-5.txt", header=TRUE, sep ="\t", "Data Lecture 5-5.txt")
responseData <- read.table("TrainExer5-5.txt", header=TRUE, sep ="\t")
responseData <- read.table("TrainExer5-5.txt", header=TRUE, sep =",")
View(responseData)
responseData <- read.csv("Data Lecture 5-5.csv", header=TRUE, sep =",")
View(responseData)
responseData$age2 <- (responseData$age)^2
responseData$age2 <- (responseData$age/10)^2
model <- glm(response ~ male + active + age + age2, family = binomial(link="logit"), data = responseData)
model <- glm(response ~ male + activity + age + age2, family = binomial(link="logit"), data = responseData)
summary(model)
summary(model, debug(TRUE))
summary(model,  diagnostics = TRUE)
601.862*2
model <- glm(response ~ male + activity + age + age2, family = normal(link="logit"), data = responseData)
model <- glm(response ~ male + activity + age + age2, data = responseData)
summary(model,  diagnostics = TRUE)
logLik(model)
model <- glm(response ~ male + activity + age + age2, family = binomial(link="logit"), data = responseData)
summary(model,  diagnostics = TRUE)
logLik(model)
responseData$response <- -responseData$response + 1
model <- glm(response ~ male + activity + age + age2, family = binomial(link="logit"), data = responseData)
summary(model,  diagnostics = TRUE)
logLik(model)
1203.7/2
1282.1/2
model2 <- glm(response ~ age + age2, family = binomial(link="logit"), data = responseData)
summary(model2,  diagnostics = TRUE)
logLik(model2)
lr <- -2*(logLik(model)-logLik(model2))
lr
logLik(model)
logLik(model2)
logLik(model)
lr1 <- logLik(model)
lr1
lr1[1]
lr <- -2*(logLik(model)[1]-logLik(model2)[1])
l1 <- logLik(model)
# Training Exercise 5.5
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 5")
responseData <- read.csv("Data Lecture 5-5.csv", header=TRUE, sep =",")
responseData$age2 <- (responseData$age/10)^2
model <- glm(response ~ male + activity + age + age2, family = binomial(link="logit"), data = responseData)
summary(model,  diagnostics = TRUE)
logLik(model)
responseData$response <- -responseData$response + 1
model <- glm(response ~ male + activity + age + age2, family = binomial(link="logit"), data = responseData)
summary(model,  diagnostics = TRUE)
l1 <- logLik(model)
l1 <- logLik(model)[1]
l0 <- logLik(model2)[1]
model2 <- glm(response ~ age + age2, family = binomial(link="logit"), data = responseData)
summary(model2,  diagnostics = TRUE)
l0 <- logLik(model2)[1]
lr <- -2*(l0-l1)
qchisq(0.05, df=2, lower.tail = FALSE)
qchisq(0.07, df=2, lower.tail = FALSE)
qchisq(0.01, df=2, lower.tail = FALSE)
qchisq(0.00001, df=2, lower.tail = FALSE)
qchisq(0.0000001, df=2, lower.tail = FALSE)
qchisq(0.00000000001, df=2, lower.tail = FALSE)
qchisq(0.0000000000001, df=2, lower.tail = FALSE)
qchisq(0.000000000000001, df=2, lower.tail = FALSE)
qchisq(0.05, df=2, lower.tail = FALSE)
