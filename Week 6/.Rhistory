google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
library(reshape2)
google.trends = dcast(google.trends, date ~ keyword + geo, value.var = "hits")
rownames(google.trends) = google.trends$date
google.trends$date = NULL
library(rvest)
library(tidyverse)
library(stringr)
library(ggmap)
install.packages("tidyverse")
install.packages("ggmap")
library(rvest)
library(tidyverse)
library(stringr)
library(ggmap)
html.amz_cities <- read_html("https://www.cbsnews.com/news/amazons-hq2-cities-second-headquarters-these-cities-are-contenders/")
df.amz_cities <- html.amz_cities %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
# inspect
df.amz_cities %>% head()
?html_node
?html_nodes
?html_table
# inspect
df.amz_cities %>% head()# inspect initial column names
colnames(df.amz_cities)
# assign new column names
colnames(df.amz_cities) <- c("metro_area", 'state', 'population_tot', 'bachelors_degree_pct')
# inspect
df.amz_cities %>% head()
df.amz_cities <- df.amz_cities %>% filter(row_number() != 1)
f.amz_cities <- mutate(df.amz_cities, population_tot = parse_number(population_tot))
# check
typeof(df.amz_cities$population_tot)
# inspect
df.amz_cities %>% head()
f.amz_cities <- mutate(df.amz_cities, bachelors_degree_pct = as.numeric(bachelors_degree_pct))
df.amz_cities <- mutate(df.amz_cities, bachelors_degree_pct = as.numeric(bachelors_degree_pct))
?mutate
df.amz_cities <- df.amz_cities %>% mutate(city = str_extract(metro_area, "^[^-]*"))
df.amz_cities %>% head()
?geocode
data.geo <- geocode(df.amz_cities$city)
data.geo %>% head()
data.geo
df.amz_cities <- cbind(df.amz_cities, data.geo)
df.amz_cities
df.amz_cities <- rename(df.amz_cities, long = lon)
df.amz_cities %>% names()
df.amz_cities <- select(df.amz_cities, city, state, metro_area, long, lat, population_tot, bachelors_degree_pct)
df.amz_cities %>% head()
map.states <- map_data("state")
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct))
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), alpha = .5) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), shape = 1) +
coord_map(projection = "albers", lat0 = 30, lat1 = 40, xlim = c(-121,-73), ylim = c(25,51)) +
scale_color_gradient2(low = "red", mid = "yellow", high = "green", midpoint = .41, labels = scales::percent_format()) +
scale_size_continuous(range = c(.9, 11),  breaks = c(2000000, 10000000, 20000000),labels = scales::comma_format()) +
guides(color = guide_legend(reverse = T, override.aes = list(alpha = 1, size = 4) )) +
labs(color = "Bachelor's Degree\nPercent"
,size = "Total Population\n(metro area)"
,title = "Possible cities for new Amazon Headquarters"
,subtitle = "Based on population & percent of people with college degrees") +
theme(text = element_text(colour = "#444444", family = "Gill Sans")
,panel.background = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
,axis.text = element_blank()
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 12)
,legend.key = element_rect(fill = "white"))
ggplot() +
geom_polygon(data = map.states, aes(x = long, y = lat, group = group)) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), alpha = .5) +
geom_point(data = df.amz_cities, aes(x = long, y = lat, size = population_tot, color = bachelors_degree_pct*.01), shape = 1) +
coord_map(projection = "albers", lat0 = 30, lat1 = 40, xlim = c(-121,-73), ylim = c(25,51)) +
scale_color_gradient2(low = "red", mid = "yellow", high = "green", midpoint = .41, labels = scales::percent_format()) +
scale_size_continuous(range = c(.9, 11),  breaks = c(2000000, 10000000, 20000000),labels = scales::comma_format()) +
guides(color = guide_legend(reverse = T, override.aes = list(alpha = 1, size = 4) )) +
labs(color = "Bachelor's Degree\nPercent"
,size = "Total Population\n(metro area)"
,title = "Possible cities for new Amazon Headquarters"
,subtitle = "Based on population & percent of people with college degrees") +
theme(text = element_text(colour = "#444444", family = "Gill Sans")
,panel.background = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
,axis.text = element_blank()
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 12)
,legend.key = element_rect(fill = "white")
)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
testData <- read.table("TrainExer44.txt", header=TRUE, sep = ",")
testData <- read.table("TrainExer61.txt", header=TRUE, sep = ",")
View(testData)
testData <- read.table("TrainExer61.txt", header=TRUE, sep = "\t")
testData <- read.table("TrainExer61.txt", header=TRUE, sep = "/t")
testData <- read.table("TrainExer61.txt", header=TRUE, sep = " ")
rm(list = ls())
library(dplyr)
library(AER)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
?read.table
testData <- read.table("TrainExer61.txt", header=TRUE, sep = "\t")
testData <- read.table("TrainExer61.txt", header=TRUE, sep = ";")
testData <- read.table("TrainExer61.csv", header=TRUE, sep = ",")
View(testData)
plot(EPSX, data = testData)
plot(testData$EPSX, data = testData)
plot(testData$X, data = testData)
plot(testData$X, testData$Y)
modelCor <- lm(Y ~ X, data = testData)
summary(modelCor)
modelCor <- lm(EPSY ~ EPSX, data = testData)
summary(modelCor)
install.packages('dyn')
install.packages('dynlm')
modelLag <- dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3))
# Training Exercise 4.4
rm(list = ls())
library(dplyr)
library(AER)
library(dynlm)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
testData <- read.table("TrainExer61.csv", header=TRUE, sep = ",")
plot(testData$X)
plot(testData$Y)
plot(testData$X, testData$Y)
# Question 2
modelCor <- lm(EPSY ~ EPSX, data = testData)
summary(modelCor)
# Question 3
modelLag <- dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3))
modelLag <- dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3), data = testData)
summary(modelLag)
modelLag <- dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data = testData)
summary(modelLag)
var.test(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data = testData)
var.test(EPSY ~ EPSX , data = testData)
var.test(EPSY ~ EPSX, data = testData)
var.test(0, 0.01573)
var.test(0, 0.01573, alternative= "two.sided")
?var.test
var.test(lm(EPSY ~ EPSX, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData)
)
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData), alternative = "one.sided")
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData), alternative = "less")
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData), alternative = "greater")
modelFTest <- lm(ESPX ~ 0, data = testData)
modelFTest <- lm(EPSY ~ 0, data = testData)
summary(modelFTest)
summary(modelCor)
var.test(lm(EPSY ~ EPSX, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData), alte)
var.test(lm(EPSY ~ EPSX, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData), alte)
var.test(lm(EPSY ~ 0, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(lm(EPSY ~ , data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(lm(EPSY ~ 1, data = testData),dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data =testData))
var.test(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), testData)
var.test(dynlm(EPSY ~ EPSX + lag(EPSY,3) + lag(EPSX,3) + lag(EPSY,2) + lag(EPSX,2) + lag(EPSY,1) + lag(EPSX,1), data = testData), testData)
View(testData)
model4 <- lm(Y ~ X, data=testData)
summary(model4)
residuals.lm(Y ~ X, data=testData)
residuals(model4)
resiData <- residuals(model4)
resiData <- as.table(residuals(model4))
resiData
resiData <- as.data.frame(residuals(model4))
View(resiData)
model5 <- dynlm(resiData ~ lag(resiData,1))
model5 <- dynlm(resiData$`residuals(model4)` ~ lag(resiData$`residuals(model4)`,1))
summary(model5)
rm(list = ls())
library(dplyr)
library(AER)
library(dynlm)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
testData <- read.table("TrainExer64.csv", header=TRUE, sep = ",")
head(testData)
model1 <- dynlm(X1 ~ lag(X1,1) + lag(X1,2), data = testData)
model1 <- dynlm(X1 ~ lag(X1,1) + lag(X1,2) + lag(X2,1) + lag(X2,2), data = testData)
summary(model1)
model1 <- dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData)
summary(model1)
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData)
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData))
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData))
ftest
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData), alternative = "one.sided")
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData), alternative = "greater")
ftest
ftest <- var.test(dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData), dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData), alternative = "less")
ftest
qnorm(1 - (0.4283/2))
qnorm(1 - (0.8566/2))
qnorm(0.8566)
pnorm(0.8566)
summary(model1, robust = T)
model2 <- dynlm(DX1 ~ lag(DX1,1) + lag(DX1,2), data = testData)
summary(model2, robust = T)
pf(0.8566, 33, 35, lower.tail=F)
pf(0.8566, 33, 35, lower.tail=T)
qf(0.8566, df1=33, df2=35)
anova(model1, model2)
1-0.8566
anova(model3, model4)
model3 <- dynlm(DX2 ~ lag(DX1,1) + lag(DX1,2) + lag(DX2,1) + lag(DX2,2), data = testData)
summary(model3, robust = T)
model4 <- dynlm(DX2 ~ lag(DX1,1) + lag(DX1,2), data = testData)
summary(model4, robust = T)
anova(model3, model4)
model4 <- dynlm(DX2 ~ lag(DX2,1) + lag(DX2,2), data = testData)
summary(model4, robust = T)
anova(model3, model4)
head(testData)
modelADF1 <- dynlm(DX1 ~ lag(YEAR,1) + lag(DX1,1) + lag(X1,1))
modelADF1 <- dynlm(DX1 ~ lag(YEAR,1) + lag(DX1,1) + lag(X1,1), data = testData)
summary(modelADF1)
modelADF2 <- dynlm(DX2 ~ lag(YEAR,1) + lag(DX2,1) + lag(X2,1), data = testData)
summary(modelADF1)
summary(modelADF2)
head(testData)
modelEG1 <- lm(X2 ~ X1, data = testData)
summary(modelEG1)
residuals(modelEG1)
modelEG2 <- dynlm(residuals(modelEG1) ~ lag(residuals(modelEG1),1))
summary(modelEG2)
?diff
install.packages("egcm")
library(dynlm)
library(egcm)
egcm(X1, X2, data = testData)
egcm(X1$testData, X2$testData)
egcm(testData$X1, testData$X2)
modelEG2 <- lm(DX2 ~ DX1, data = testData)
summary(modelEG2)
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1) + lag(residuals(modelEG2),1))
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1) + lag(residuals(modelEG2)))
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1))
modelEG3 <- lm(residuals(modelEG2) ~ lag(residuals(modelEG1),1))
modelEG3 <- lm(residuals(modelEG2) ~ residuals(modelEG1))
modelEG1 <- lm(X2 ~ X1, data = testData)
summary(modelEG1)
modelEG2 <- lm(DX2 ~ DX1, data = testData)
summary(modelEG2)
summary(modelEG1)
residuals(modelEG1)
residuals(modelEG2)
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1)
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1))
modelEG3 <- dynlm(residuals(modelEG2) ~ lag(residuals(modelEG1),1), data = testData)
lag(residuals(modelEG1),1)
modelEG3 <- dynlm(residuals(modelEG2) ~ residuals(modelEG1), data = testData)
modelEG3 <- dynlm(residuals(modelEG1) ~ residuals(modelEG2), data = testData)
modelEG3 <- dynlm(residuals(modelEG1) ~ lag(residuals(modelEG2),1), data = testData)
modelEG3 <- dynlm(residuals(modelEG1) ~ lag(residuals(modelEG1),1))
residuals(modelEG1)
diff(residuals(modelEG1))
modelEG2 <- dynlm(diff(residuals(modelEG1)) ~ lag(residuals(modelEG1),1) + lag(diff(residuals(modelEG1)),1))
testData$resi <- residuals(modelEG1)
View(testData)
testData$Dresi <- diff(residuals(modelEG1))
diff(residuals(modelEG1))
testData$Dresi <- c("NA", diff(residuals(modelEG1)))
testData$Dresi <- c(NA, diff(residuals(modelEG1)))
modelEG2 <- dynlm(Dresi ~ lag(resi,1) + lag(Dresi,1))
modelEG2 <- dynlm(Dresi ~ lag(resi,1) + lag(Dresi,1), data = testData)
summary(modelEG2)
head(testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + (X2 ~ X1))
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + (X2 ~ X1), data = testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) , data = testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + lm(X2 ~ X1), data = testData)
xeq=testData['X1', 'X2']
xtr=testData['DX1']
install.packages("ecm")
library(ecm)
?ecm
modelECM1 <- ecm(testData$X1, xeq, xtr)
modelECM1 <- ecm(testData$X1, testData['X1', 'X2'], testData['DX1])
modelECM1 <- ecm(testData$X1, testData['X1', 'X2'], testData['DX1]))
modelECM1 <- ecm(testData$X1, testData['X1', 'X2'], testData['DX1]))
modelECM1 <- ecm(testData$X1, testData['X1', 'X2'], testData['DX1']))
modelECM1 <- ecm(testData$X1, testData['X1', 'X2'], testData['DX1'])
xeq=testData['X1', 'X2']
xeq
xeq=testData[c('X1', 'X2')]
xtr=testData['DX1']
modelECM1 <- ecm(testData$X1, xeq,xtr)
modelECM1
summary(modelECM1)
modelECM1 <- ecm(testData$X1,xtr, xeq)
modelECM1 <- ecm(testData$X1, xeq,lag(xtr))
lag(xtr)
View(xtr)
lag(xtr,1)
?lag
lagpad(xtr,1)
modelECM1 <- ecm(testData$X1, xeq,lagpad(xtr,1))
xtr=lagpad(testData['DX1'])
xtr=as.data.frame(lagpad(testData['DX1']))
modelECM1 <- ecm(testData$X1, xeq, lagpad(xtr,1))
modelECM1 <- ecm(testData$X1, xeq, xtr)
modelECM1 <- ecm(testData$X1, xeq, xtr)
xtr=testData['DX1']
modelECM1 <- ecm(testData$X1, xeq, xtr)
ta.frame(lagpad(
xtr=as.data.frame(lagpad(testData['DX1']),1)
xtr=as.data.frame(lagpad(testData['DX1'],1))
xtr=as.data.frame(lagpad(testData['DX1'],1))
modelECM1 <- ecm(testData$X1, xtr, xeq)
head(testData)
modelECM1 <- dynlm(lag(DX1,1) + a*(lag(X2,1) - 0.92*lag(X1,1))
modelECM1 <- dynlm(lag(DX1,1) + a*(lag(X2,1) - 0.92*lag(X1,1)))
modelECM1 <- dynlm(lag(DX1,1) + a*(X2 - X1), data=testData)
modelECM1 <- dynlm(lag(testData$DX1,1) + a*(X2 - X1), data=testData)
1-coef(modelEG1)[[2]]
modelEG1
modelECM1 <- dynlm(lag(testData$DX1,1) + (lag(testData$X2,1) - lag(testData$X1,1)), data=testData)
modelECM1 <- dynlm(lag(testData$DX1,1) + lag(testData$X2,1) - lag(testData$X1,1), data=testData)
modelECM1 <- dynlm(lag(testData$DX1,1) + lag(testData$X1,1), data=testData)
modelECM1 <- dynlm(lag(DX1,1) + lag(X1,1), data=testData)
View(testData)
modelECM1 <- dynlm(lag(X1,1) + lag(X2,1), data=testData)
modelECM1 <- dynlm(lag(X1,1) ~ lag(X2,1), data=testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + a*(X2 - X1), data=testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + (X2 - X1), data=testData)
summary(modelECM1)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + (X2 ~ X1), data=testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + lm(X2 ~ X1), data=testData)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + lag(X2,1) + lag(X1,1), data=testData)
summary(modelECM1)
xeq=testData[c('X1', 'X2')]
xtr=as.data.frame(lagpad(testData['DX1'],1))
modelECM1 <- ecm(testData$X1, xtr, xeq)
modelECM1 <- ecm(testData$X1, xeq, xtr)
xeq=testData[c('X1', 'X2')]
xtr=as.data.frame(lagpad(testData['DX1'],1))
xtr=testData['DX1']
modelECM1 <- ecm(testData$X1, xeq, xtr)
summary(modelECM1)
0.463*0.92
View(xtr)
lagpad(xtr)
xtr = lagpad(xtr)
View(xtr)
xtr=as.data.frame(testData['DX1'])
View(xtr)
xtr=as.data.frame(lagpad(testData['DX1'],1)
modelECM1 <- ecm(testData$X1, xeq, xtr)
modelECM1 <- dynlm(DX1 ~ lag(DX1,1) + lag(X2,1) + lag(X1,1), data=testData)
summary(modelECM1)
xtr=as.data.frame(lagpad(testData['DX1'],1))
View(xtr)
lagpad(testData['DX1'],1)
xtr =lagpad(testData['DX1'],1)
as.data.frame(xtr)
as.data.frame.data.frame(xtr)
lagpad(testData$DX1,1)
xtr=lagpad(testData$DX1,1)
xtr =as.data.frame(lagpad(testData['DX1'],1))
View(xtr)
xtr =lagpad(testData['DX1'],1)
View(xtr)
xtr=lagpad(testData$DX1,1)
xtr=as.data.frame(lagpad(testData$DX1,1))
View(xtr)
modelECM1 <- ecm(testData$X1, xeq, xtr)
summary(modelECM1)
modelECM1 <- ecm(testData$X1, xeq, xtr)
modelECM1 <- ecm(testData$DX1, xeq, xtr)
summary(modelECM1)
xtr=testData$DX1
xtr = testData['DX1']
modelECM1 <- ecm(testData$DX1, xeq, xtr)
summary(modelECM1)
modelECM1 <- ecm(testData$DX1, xeq)
modelECM1 <- ecm(testData$DX1, xtr,xeq)
xeq=testData[c('X1', 'X2')]
data(Wilshire)
head(data("Wilshire"))
trn <- Wilshire[Wilshire$date<='2014-12-01',]
head(trn)
xeq <- xtr <- trn[c('CorpProfits', 'FedFundsRate', 'UnempRate')]
xeq
model1 <- ecm(trn$Wilshire5000, xeq, xtr, includeIntercept=TRUE)
summary(model1)
xeq <- trn[c('CorpProfits', 'FedFundsRate')]
xtr <- trn['UnempRate']
model2 <- ecm(trn$Wilshire5000, xeq, xtr, includeIntercept=TRUE)
summary(model2)
xeq=testData[c('X1', 'X2')]
modelECM1 <- ecm(testData$DX1, xtr,xeq, includeIntercept = TRUE)
xeq=testData[c('X1', 'X2')]
xtr = testData['DX1']
modelECM1 <- ecm(testData$DX1, xtr,xeq, includeIntercept = TRUE)
modelECM1 <- ecm(testData$DX1, xeq,xtr, includeIntercept = TRUE)
summary(modelECM1)
xtr = testData['X1']
modelECM1 <- ecm(testData$DX1, xeq,xtr, includeIntercept = TRUE)
summary(modelECM1)
xeq=testData[c('X1')]
xtr=testData$DX1
xtr = testData['X1']
modelECM1 <- ecm(testData$DX1, xeq,xtr, includeIntercept = TRUE)
summary(modelECM1)
xeq=testData[c('X1', 'X2')]
xtr = testData['X1']
modelECM1 <- ecm(testData$DX1, xeq,xtr, includeIntercept = TRUE)
summary(modelECM1)
testData <- read.table("TrainExer65.csv", header=TRUE, sep = ",")
# Training Exercise 4.4
rm(list = ls())
library(dplyr)
library(AER)
library(dynlm)
library(egcm)
library(ecm)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
testData <- read.table("TrainExer65.csv", header=TRUE, sep = ",")
View(testData)
?plot
head(testData)
plot(YEAR, LOGIP, data=testData)
plot(testData$YEAR, testData$LOGIP)
plot(testData$YEAR, testData$LOGIP, col="blue", type = 'l')
lines(testData$YEAR, testData$LOGCLI, col="red")
testData$DGIP <- diff(testData$GIP)
testData$DGIP <- c("NA", diff(testData$GIP))
testData$DGIP <- c("NA", diff(testData$GIP))
testData$DGCLI <- diff("NA", diff(testData$GCLI))
testData$DGCLI <- c("NA", diff(testData$GCLI))
plot(testData$YEAR, testData$DGIP, col="blue", type = 'l')
testData$DGIP <- c(0, diff(testData$GIP))
testData$DGIP <- c(0, diff(testData$GIP))
testData$DGCLI <- c(0, diff(testData$GCLI))
plot(testData$YEAR, testData$DGIP, col="blue", type = 'l')
# Training Exercise 4.4
rm(list = ls())
library(dplyr)
library(AER)
library(dynlm)
library(egcm)
library(ecm)
setwd("~/Documents/2017/Coursera/Econometrics/Week 6")
testData <- read.table("TrainExer65.csv", header=TRUE, sep = ",")
# Question 1
plot(testData$YEAR, testData$LOGIP, col="blue", type = 'l')
lines(testData$YEAR, testData$LOGCLI, col="red")
# May be cointegrated based on the graphs produced above.
plot(testData$YEAR, testData$GIP, col="blue", type = 'l')
plot(testData$YEAR, testData$GCLI, col="red", type = 'l')
head(testData)
modelADF1 <- dynlm(LOGIP ~ YEAR + lag(GIP,2))
modelADF1 <- dynlm(LOGIP ~ YEAR + lag(GIP,2), data = testData)
summary(modelADF1)
modelADF1 <- dynlm(LOGIP ~ YEAR + lag(GIP,1) + lag(GIP,2), data = testData)
summary(modelADF1)
modelADF1 <- dynlm(GIP ~ YEAR + lag(GIP,1) + lag(GIP,2), data = testData)
summary(modelADF1)
modelADF1 <- dynlm(LOGIP ~ YEAR + lag(GIP,1) + lag(GIP,2), data = testData)
summary(modelADF1)
head(testData)
modelADF1 <- dynlm(GIP ~ YEAR + lag(GIP,1) + lag(GIP,2) + lag(LOGIP), data = testData)
summary(modelADF1)
modelADF1 <- dynlm(GIP ~ YEAR + lag(GIP,1) + lag(GIP,2) + lag(LOGIP), data = testData)
head(testData)
modelADF2 <- dynlm(GCLI ~ YEAR + lag(GCLI,1) + lag(GCLI,2) + lag(LOGCLI), data = testData)
summary(modelADF2)
modelADF2 <- dynlm(GCLI ~ YEAR + lag(GCLI,1) + lag(LOGCLI), data = testData)
summary(modelADF2)
modelADF1 <- dynlm(GIP ~ YEAR + lag(GIP,1) + lag(GIP,2) + lag(LOGIP,1), data = testData)
summary(modelADF1)
modelADF2 <- dynlm(GCLI ~ YEAR + lag(GCLI,1) + lag(GCLI,2) + lag(LOGCLI,1), data = testData)
summary(modelADF2)
modelADF2 <- dynlm(GCLI ~ lag(YEAR,1) + lag(GCLI,1) + lag(GCLI,2) + lag(LOGCLI,1), data = testData)
summary(modelADF2)
modelADF2 <- dynlm(GCLI ~ lag(YEAR,1) + lag(GCLI,1)  + lag(LOGCLI,1), data = testData)
summary(modelADF2)
modelADF2 <- dynlm(GCLI ~ lag(YEAR,1) + lag(YEAR,2) + lag(GCLI,1) + lag(GCLI,2) + lag(LOGCLI,1), data = testData)
summary(modelADF2)
modelADF2 <- dynlm(GCLI ~ lag(YEAR,1) + lag(GCLI,1) + lag(GCLI,2) + lag(LOGCLI,1), data = testData)
summary(modelADF2)
head(testData)
modelEG1 <- lm(LOGIP ~ LOGCLI, data = testData)
summary(modelEG1)
modelEG1 <- lm(GIP ~ GCLI, data = testData)
summary(modelEG1)
modelEG1 <- lm(LOGIP ~ LOGCLI, data = testData)
summary(modelEG1)
modelEG1 <- dynlm(LOGIP ~ LOGCLI, data = testData)
summary(modelEG1)
testData$resi <- residuals(modelEG1)
testData$Dresi <- c(NA, diff(residuals(modelEG1)))
modelEG2 <- dynlm(Dresi ~ lag(resi,1) + lag(Dresi,1), data = testData)
summary(modelEG2)
modelEG2 <- dynlm(Dresi ~ lag(resi,1) + lag(Dresi,1) + lag(Dresi,2), data = testData)
summary(modelEG2)
